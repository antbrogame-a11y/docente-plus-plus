\nconst setupLessons = async () => {\n\n    // --- CONTROLLO FUNZIONI GLOBALI ---\n    if (typeof loadData !== \'function\' || !window.model) {\n        console.error(\'Funzioni globali (loadData) o modello AI (window.model) non trovati.\');\n        document.getElementById(\'lesson-result-container\').innerHTML = \n            \'<p class=\"error-message\">Errore: Impossibile inizializzare il modulo Lezioni. L\\\'assistente AI non è disponibile.</p>\';\n        return;\n    }\n\n    // --- ELEMENTI DEL DOM ---\n    const form = document.getElementById(\'lesson-generator-form\');\n    const topicInput = document.getElementById(\'lesson-topic-input\');\n    const typeSelect = document.getElementById(\'lesson-type-select\');\n    const classSelect = document.getElementById(\'lesson-class-select\');\n    const durationInput = document.getElementById(\'lesson-duration-input\');\n    const detailsTextarea = document.getElementById(\'lesson-details-textarea\');\n    const generateBtn = document.getElementById(\'generate-lesson-btn\');\n    const resultContainer = document.getElementById(\'lesson-result-container\');\n    const resultPlaceholder = document.getElementById(\'lesson-result-placeholder\');\n    const resultContent = document.getElementById(\'lesson-result-content\');\n    const resultLoader = document.getElementById(\'lesson-result-loader\');\n\n    // --- DATI ---\n    const classes = await loadData(\'classes\', []);\n\n    // --- FUNZIONI ---\n\n    const populateClasses = () => {\n        classSelect.innerHTML = \'<option value=\"\">Nessuna (generico)</option>\';\n        classes.forEach(c => {\n            const option = document.createElement(\'option\');\n            option.value = c.name; // Usiamo il nome per passarlo all\'IA\n            option.textContent = c.name;\n            classSelect.appendChild(option);\n        });\n    };\n\n    const handleGeneration = async (e) => {\n        e.preventDefault();\n        \n        const topic = topicInput.value.trim();\n        const type = typeSelect.value;\n        const className = classSelect.value;\n        const duration = durationInput.value;\n        const details = detailsTextarea.value.trim();\n\n        if (!topic) {\n            alert(\"Per favore, inserisci un argomento principale.\");\n            return;\n        }\n\n        // Mostra il loader e nascondi il resto\n        resultPlaceholder.style.display = \'none\';\n        resultContent.style.display = \'none\';\n        resultLoader.style.display = \'block\';\n        generateBtn.disabled = true;\n\n        // Costruisci il prompt per Gemini\n        let prompt = `Agisci come un assistente per un insegnante della scuola secondaria italiana. Genera il seguente contenuto:\n\n        - **Tipo di Contenuto**: ${document.querySelector(`#lesson-type-select option[value=\"${type}\"]`).textContent}\n        - **Argomento**: ${topic}\n        `;\n\n        if (className) {\n            prompt += `- **Classe di Riferimento**: ${className}\\n`;\n        }\n        if (duration) {\n            prompt += `- **Durata Stimata**: ${duration} minuti\\n`;\n        }\n        if (details) {\n            prompt += `- **Dettagli Aggiuntivi**: ${details}\\n`;\n        }\n\n        prompt += `\\nFornisci una risposta ben strutturata, chiara e pronta per essere usata in un contesto didattico. Usa la formattazione Markdown per titoli, liste e grassetto.`\n        \n        try {\n            const result = await window.model.generateContent(prompt);\n            const response = await result.response;\n            const text = await response.text();\n\n            // Semplice conversione da Markdown a HTML (per h2, h3, ul, li, strong)\n            let html = text\n                .replace(/\\*\\*\\*(.*?)\\*\\*\\*/g, \'<h3>$1</h3>\') // H3\n                .replace(/\\*\\*(.*?)\\*\\*/g, \'<h2>$1</h2>\')   // H2\n                .replace(/^\\*\\s(.*?)$/gm, \'<li>$1</li>\')     // List items\n                .replace(/(\<li\>.*?<\\/li\>)/gs, \'<ul>$1</ul>\') // Wrap in UL\n                .replace(/\\*(.*?)\\*/g, \'<strong>$1</strong>\') // Bold\n                .replace(/\\n/g, \'<br>\');\n\n            resultContent.innerHTML = html;\n            resultContent.style.display = \'block\';\n\n        } catch (error) {\n            console.error(\"Errore durante la generazione del contenuto:\", error);\n            resultContent.innerHTML = \'<p class=\"error-message\">Si è verificato un errore. Riprova.</p>\';\n            resultContent.style.display = \'block\';\n        } finally {\n            resultLoader.style.display = \'none\';\n            generateBtn.disabled = false;\n        }\n    };\n\n    // --- EVENT LISTENERS ---\n    form.addEventListener(\'submit\', handleGeneration);\n\n    // --- INIZIALIZZAZIONE ---\n    populateClasses();\n};\n